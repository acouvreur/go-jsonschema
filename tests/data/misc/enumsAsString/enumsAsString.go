// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"
import "reflect"

type EnumsAsString struct {
	// MyObject corresponds to the JSON schema field "myObject".
	MyObject *EnumsAsStringMyObject `json:"myObject,omitempty" yaml:"myObject,omitempty" mapstructure:"myObject,omitempty"`
}

type EnumsAsStringMyObject struct {
	// MyEnum corresponds to the JSON schema field "myEnum".
	MyEnum string `json:"myEnum" yaml:"myEnum" mapstructure:"myEnum"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString" yaml:"myString" mapstructure:"myString"`
}

type EnumsAsStringMyObjectMyEnum string

const EnumsAsStringMyObjectMyEnumVALUE1 EnumsAsStringMyObjectMyEnum = "VALUE1"
const EnumsAsStringMyObjectMyEnumVALUE2 EnumsAsStringMyObjectMyEnum = "VALUE2"

var enumValues_EnumsAsStringMyObjectMyEnum = []interface{}{
	"VALUE1",
	"VALUE2",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnumsAsStringMyObjectMyEnum) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EnumsAsStringMyObjectMyEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EnumsAsStringMyObjectMyEnum, v)
	}
	*j = EnumsAsStringMyObjectMyEnum(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnumsAsStringMyObject) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["myEnum"]; raw != nil && !ok {
		return fmt.Errorf("field myEnum in EnumsAsStringMyObject: required")
	}
	if _, ok := raw["myString"]; raw != nil && !ok {
		return fmt.Errorf("field myString in EnumsAsStringMyObject: required")
	}
	type Plain EnumsAsStringMyObject
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EnumsAsStringMyObject(plain)
	return nil
}
